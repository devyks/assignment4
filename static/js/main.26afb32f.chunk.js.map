{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","toDoState","JSON","parse","localStorage","getItem","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","returnList","slice","setItem","stringify","DOING","DONE","CUSTOM","ToDoList","useRecoilState","setCategory","console","log","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.26afb32f.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport enum Categories {\r\n  \"TO_DO\" = \"TO_DO\",\r\n  \"DOING\" = \"DOING\",\r\n  \"CUSTOM\" = \"CUSTOM\",\r\n  \"DONE\" = \"DONE\",\r\n}\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: Categories;\r\n}\r\n\r\nexport const categoryState = atom<Categories>({\r\n  key: \"category\",\r\n  default: Categories.TO_DO,\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: JSON.parse(localStorage.getItem(\"todoState\") || \"[]\") || []\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { categoryState, toDoState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    setToDos((oldToDos) => [\r\n      { text: toDo, id: Date.now(), category },\r\n      ...oldToDos,\r\n    ]);\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleValid)}>\r\n      <input\r\n        {...register(\"toDo\", {\r\n          required: \"Please write a To Do\",\r\n        })}\r\n        placeholder=\"Write a to do\"\r\n      />\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;","import React from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { Categories, IToDo, toDoState } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: name as any };\r\n\r\n      const returnList = [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n      localStorage.setItem(\"todoState\", JSON.stringify(returnList));\r\n      return returnList;\r\n    });\r\n  };\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {category !== Categories.DOING && (\r\n        <button name={Categories.DOING} onClick={onClick}>\r\n          Doing\r\n        </button>\r\n      )}\r\n      {category !== Categories.TO_DO && (\r\n        <button name={Categories.TO_DO} onClick={onClick}>\r\n          To Do\r\n        </button>\r\n      )}\r\n      {category !== Categories.DONE && (\r\n        <button name={Categories.DONE} onClick={onClick}>\r\n          Done\r\n        </button>\r\n      )}\r\n      {category !== Categories.CUSTOM && (\r\n        <button name={Categories.CUSTOM} onClick={onClick}>\r\n          CUSTOM\r\n        </button>\r\n      )}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { Categories, categoryState, toDoSelector } from \"../atoms\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n  console.log(toDos);\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n      <select value={category} onInput={onInput}>\r\n        <option value={Categories.TO_DO}>To Do</option>\r\n        <option value={Categories.DOING}>Doing</option>\r\n        <option value={Categories.CUSTOM}>Custom</option>\r\n        <option value={Categories.DONE}>Done</option>\r\n      </select>\r\n      <CreateToDo />\r\n      {toDos?.map((toDo) => (\r\n        <ToDo key={toDo.id} {...toDo} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"white\",\r\n  accentColor: \"#9c88ff\",\r\n  cardBgColor: \"transparent\",\r\n};"],"sourceRoot":""}